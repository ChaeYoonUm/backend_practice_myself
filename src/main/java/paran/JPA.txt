JPA
-------------------------------------------------------------------------------------------
Oracle, MySQL, MSSQL 등을 쓰지 않는 웹 애플리케이션은 거의 없음
객체를 관계형 데이터 베이스에서 관리하는 것이 중요!!
-------------------------------------------------------------------------------------------
관계형 데이터베이스 -> SQL만 인식할 수 있음
CRUD(Create, Read, Update, Delete) SQL을 매번 생성
-------------------------------------------------------------------------------------------
<SQL 예시>
insert into user (id, name, ... ) values (...);
select * froem user where ... ;
update user set ... where .... ;
delete from user where ...;
-------------------------------------------------------------------------------------------
관계형 데이터베이스 : """어떻게 데이터를 저장할지"""에 초점
객체지향 프로그래밍 : """기능과 속성을 한 곳에서 관리"""하는 기술

==> 객체를 데이터베이스에 저장 ==> 둘은 아예 다른 패러다임 ==> 패러다임 불일치
-------------------------------------------------------------------------------------------
JPA : 서로 지향하는 바가 다른 2개 영역(객체지향, 데이터베이스)을 중간에서 패러다임 일치시켜 주는 기술
객체지향적으로 개발 -> JPA가 관계형 데이터베이스에 맞게 SQL을 대신 생성해서 실행 => 더 이상 SQL에 종속적인 개발 X
-------------------------------------------------------------------------------------------
JPA : 인터페이스로써의 자바 표준명세서
인터페이스이기 때문에, 구현체가 필요함 => Hibernate, Eclipse Link 등이 있음
JPA <- Hibernate <- Spring Data JPA
-------------------------------------------------------------------------------------------
Spring Data JPA 등장 이유
- 구현체 교체의 용이성 : Hibernate 외에 다른 구현체로 쉽게 교체하기 위함
- 저장소 교체의 용이성 : 관계형 데이터베이스 외에 다른 저장소로 쉽게 교체하기 위함
Spring Data의 하위 프로젝트들은 기본적인 CRUD의 인터페이스가 같기 때문 ( save(), findAll(), findOne() 등을 인터페이스로 갖고 있음)
-------------------------------------------------------------------------------------------


